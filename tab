@ExtendWith(MockitoExtension.class)
class SchedulerEmailNotifTest {

    @Mock
    private ChangesHistoryRepo changesHistoryRepo;
    @Mock
    private RefVersionsCopyStatusRepo refVersionsCopyStatusRepo;
    @Mock
    private RefWorkspaceRepo refWorkspaceRepo;
    @Mock
    private EmailService emailService;
    @Mock
    private MailProperties mailProperties;

    @InjectMocks
    private SchedulerEmailNotif schedulerEmailNotif;

    @Test
    void testExecuteTaskSxEmailNotif_withData() throws Exception {
        // GIVEN
        String workspaceName = "WS1";
        Long versionId = 1L;

        RefWorkspace mockWorkspace = new RefWorkspace();
        mockWorkspace.setName(workspaceName);

        RefVersionsCopyStatus mockStatus = new RefVersionsCopyStatus();
        mockStatus.setVersion(versionId);
        mockStatus.setWorkspace(workspaceName);

        Map<String, Map<Long, List<RefVersionsCopyStatus>>> fakeMap = Map.of(
            workspaceName, Map.of(versionId, List.of(mockStatus))
        );

        // mock du repo status
        when(refVersionsCopyStatusRepo.findByReferentialNameAndCopyStatusAndCopyTimestampGreaterThanEqualAndCopyTimestampLessThan(
                anyString(), any(), any(), any())
        ).thenReturn(List.of(mockStatus));

        // mock du workspace
        when(refWorkspaceRepo.findByWorkspace(workspaceName)).thenReturn(mockWorkspace);

        // mock de l’history
        ChangesHistory ch = new ChangesHistory();
        ch.setAction("UPDATE");
        ch.setVersion(versionId);
        ch.setWorkspace(workspaceName);
        ch.setContent("{\"setOfLimit\": {\"riskLimitReferentialFamily\": \"FamilleTest\"}}");
        ch.setInputTimestamp(LocalDateTime.now());
        ch.setInputBy("tester");
        when(changesHistoryRepo.findByObjectAndWorkspaceAndVersionInAndInputTimestampGreaterThanEqualAndInputTimestampLessThan(
                anyString(), eq(mockWorkspace), anySet(), any(), any())
        ).thenReturn(List.of(ch));

        // WHEN
        schedulerEmailNotif.executeTaskSxEmailNotif();

        // THEN
        verify(emailService, atLeastOnce()).apply(
                eq(emailService),
                eq(mailProperties),
                anyList()
        );
    }

    @Test
    void testExecuteTaskSxEmailNotif_noData() throws Exception {
        // GIVEN
        when(refVersionsCopyStatusRepo.findByReferentialNameAndCopyStatusAndCopyTimestampGreaterThanEqualAndCopyTimestampLessThan(
                anyString(), any(), any(), any())
        ).thenReturn(Collections.emptyList());

        // WHEN
        schedulerEmailNotif.executeTaskSxEmailNotif();

        // THEN : aucun email ne doit être envoyé
        verify(emailService, never()).apply(any(), any(), any());
    }
}
