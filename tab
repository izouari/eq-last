    @Test
    void execute_throwsBusinessException_whenJsonIsInvalid() throws Exception {
        // GIVEN
        String referentialName = "RISK_LIMIT_REFERENTIAL";
        String workspaceName   = "WS1";
        Long   versionId       = 2L;

        RefWorkspace ws = new RefWorkspace();
        ws.setWorkspace(workspaceName);

        RefVersionsCopyStatus status = new RefVersionsCopyStatus();
        status.setWorkspace(workspaceName);
        status.setVersion(versionId);

        when(refVersionsCopyStatusRepo
                .findByReferentialNameAndCopyStatusAndCopyTimestampGreaterThanEqualAndCopyTimestampLessThan(
                        eq(referentialName), any(), any(), any()))
            .thenReturn(List.of(status));

        when(refWorkspaceRepo.findByWorkspace(workspaceName)).thenReturn(ws);

        // contenu JSON INVALIDE pour forcer objectMapper.readTree(...) à lever une JsonProcessingException
        ChangesHistory ch = new ChangesHistory();
        ch.setAction(RefInputActionEnum.UPDATE.name());
        ch.setVersion(versionId);
        ch.setWorkspace(workspaceName);
        ch.setInputBy("tester");
        ch.setInputTimestamp(LocalDateTime.now());
        ch.setContent("{invalid-json"); // volontairement invalide
        ch.setOriginContent("{\"before\":\"x\"}");
        when(changesHistoryRepo
                .findByObjectAndWorkspaceAndVersionInAndInputTimestampGreaterThanEqualAndInputTimestampLessThan(
                        eq(referentialName), eq(ws), anySet(), any(), any()))
            .thenReturn(List.of(ch));

        // WHEN + THEN
        // Selon ton implémentation, BusinessErrorMessage.JSON_PARSE_ERROR.toException(...) retourne
        // probablement une RuntimeException custom (ex: SwapExException / R2D2Exception).
        org.junit.jupiter.api.Assertions.assertThrows(
                RuntimeException.class, // remplace par ta classe exacte si dispo: SwapExException.class
                () -> schedulerEmailNotif.executeTaskSxEmailNotif()
        );

        // et évidemment dans ce cas, aucun mail envoyé
        verify(emailService, never()).apply(any(), any(), any());
    }
}
