Envoi d’Emails – Notification Automatique
🎯 Objectif

L’objectif est d’envoyer automatiquement des emails de notification (par exemple : publication de référentiels) en utilisant JavaMailSender et des templates FreeMarker.
Ce module permet de générer des emails dynamiques en HTML basés sur des données métiers (NotifEmailDto).

🏗️ Architecture Technique
1. Configuration du MailSender

La configuration du client SMTP est définie dans la classe MailSenderConfig.

@@@@@Code : MailSenderConfig



👉 Cette configuration permet :

d’initialiser le client SMTP,

de définir les propriétés (host, protocol, debug…),

de s’appuyer sur les propriétés applicatives (MailProperties).




2. Service d’Envoi d’Email

Le service EmailService encapsule la logique d’envoi via JavaMailSender et FreeMarker.

@@@@@@@@Code : sendEmailWithTemplate


👉 Ici :

FreeMarker est utilisé pour générer le contenu HTML en injectant les variables,

JavaMailSender se charge de l’envoi effectif,

La gestion d’erreurs est centralisée avec BusinessErrorMessage.



3. Enum MailSender

L’enum MailSender permet de définir différents types de mails avec leur template associé.

@@@@@@@Code : MailSender



4. Scheduler

La classe SchedulerEmailNotif orchestre l’exécution périodique et déclenche l’envoi d’email.

Exemple : notification de publication


@@@@@@@@Code : SchedulerEmailNotif

onnes pratiques

Externaliser les templates .ftl dans src/main/resources/templates.

Garder le service générique → EmailService ne doit pas contenir de logique métier.

Utiliser l’enum MailSender pour centraliser les types de mails.

Logger systématiquement les tentatives d’envoi (succès/échec).

Activer le mode debug SMTP en recette (mail.debug=true), mais désactiver en prod.

Prévoir des tests unitaires sur :

la construction des variables injectées,

la génération du NotifEmailDto,

le fallback en cas de TemplateException



spring:
  mail:
    host: smtp.mycorp.local
    # … autres props communes

---
spring:
  config:
    activate:
      on-profile: recette
  mail:
    properties:
      mail.debug: true

---
spring:
  config:
    activate:
      on-profile: prod
  mail:
    properties:
      mail.debug: false


Ensuite, lance ton app avec le profil voulu :

Recette : -Dspring.profiles.active=recette

Prod : -Dspring.profiles.active=prod

En K8s/Docker, tu peux aussi piloter ça par variable d’environnement :
SPRING_MAIL_PROPERTIES_MAIL_DEBUG=true|false.
