Email Notifications â€“ Automated Sending with FreeMarker
ðŸŽ¯ Purpose

The purpose of this module is to automatically send notification emails (e.g., referential publication reports) using Spring Boot, JavaMailSender, and FreeMarker templates.
This ensures that email content is dynamic, maintainable, and easy to customize.


Technical Architecture
1. MailSender Configuration

The MailSenderConfig class defines the SMTP configuration and initializes the JavaMailSender.

@@@@@@@Code : MailSenderConfig

ðŸ“Œ Purpose:
This class centralizes the configuration of the SMTP client (JavaMailSender). It sets the SMTP host, protocol, and debug mode.

2. Email Service

The EmailService is responsible for processing FreeMarker templates and sending the email via JavaMailSender.

@@@@@@@ Code : EmailService


Purpose:
This service generates HTML email content using FreeMarker templates and sends it with JavaMailSender.

âœ… Best Practices:

Keep the service generic, without business-specific logic.

Use templates (.ftl) for content to ensure separation of concerns.

Log success/failure for traceability.

Catch and rethrow exceptions with business-specific errors (BusinessErrorMessage).



3. MailSender Enum

The MailSender enum defines the different email types and their associated templates.


@@@@@@@Code :MailSender



Purpose:
This enum defines different email types with their associated FreeMarker template and subject. It allows centralizing all email logic.

âœ… Best Practices:

Centralize all templates and subjects in the enum for easier maintenance.

Build the email subject dynamically when necessary.

Pass only DTOs (NotifEmailDto) and not raw entities to keep it decoupled.


4. Scheduler

@@@ Code : 4. Scheduler

@@@

ðŸ“Œ Purpose:
This class orchestrates the scheduled execution of email notifications. It collects data, builds DTOs, and triggers the appropriate MailSender.

âœ… Best Practices:

Keep the scheduler focused on orchestration, not on data processing.

Offload data preparation to repositories/services.

Ensure scheduling frequency is configurable (via application.yml or Quartz).



FreeMarker templates : 

Purpose:
Defines the HTML structure of the email, with placeholders for dynamic data injected by FreeMarker.

General Best Practices

âœ… Best Practices:

Keep templates simple and avoid heavy business logic.

Use ${variable} placeholders for clarity.

Ensure email is compatible with common email clients (test in Outlook/Gmail).

Store templates under resources/templates.

Best Practices

Externalize .ftl templates in resources/templates.

Keep the EmailService generic, without business logic.

Use MailSender enum to centralize all email types and subjects.

Always log success and failure when sending emails.

Enable mail.debug=true only in non-production profiles (recette, staging).
Example:


# application-recette.yml
spring:
  mail:
    properties:
      mail.debug: true

# application-prod.yml
spring:
  mail:
    properties:
      mail.debug: false
