Naming Convention for ‚ÄúType‚Äù Tables Used for Front-End Fields (FER)

Purpose

To ensure consistency, visibility, and to reduce unnecessary back-end code, we are defining a standard naming convention for tables that are used only to provide dropdown or list values for the front-end (FER).

These tables:

Are not intended to support complex business logic.

Do not require creating a Spring Boot Entity or Repository.

Are consumed only through a generic API to expose their values.

Proposed Naming Convention

fer_types_fieldname


| Context | Front-End Field  | Table Name           |
| ------- | ---------------- | -------------------- |
| FER     | Product Category | `fer_types_category` |
| FER     | Status Type      | `fer_types_status`   |


Explanation:

fer: Identifies your scope (Front-End Referential).

types: Indicates this is a type table.

fieldname: Matches the actual field name used by the front-end.

Minimum Table Structure

Each type table must contain only:


| Column | SQL Type                    | Description                   |
| ------ | --------------------------- | ----------------------------- |
| `id`   | BIGINT (PK) AUTO\_INCREMENT | Unique identifier.            |
| `name` | VARCHAR                     | Value displayed on the front. |



Value Consumption

A generic API has been added in XXX to retrieve these values.

No specific Entity or Repository should be created for these tables to avoid unnecessary code.

If a type table ever requires additional fields, extend the generic API and update the documentation accordingly.


Benefits

üìã Better visibility: All FER-related type tables are easy to identify in the database manager.

üîÑ Consistency: Unified format for all type tables.

‚úÇÔ∏è Less code: No need for extra Entities or Repositories.

üßπ Simpler maintenance: New values can be added directly in the database without impacting the back-end.
