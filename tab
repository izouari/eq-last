import com.fasterxml.jackson.databind.JsonNode;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.List;

class JsonUtilsTest {

    @Test
    void testProcessJsonDiff_withChangedField() {
        // GIVEN
        String origin = "{ \"name\": \"Alice\", \"age\": 25 }";
        String actual = "{ \"name\": \"Bob\",   \"age\": 25 }"; // seul "name" change

        // WHEN
        List<JsonDiffDto> diffs = JsonUtils.processJsonDiff(origin, actual);

        // THEN
        assertThat(diffs).hasSize(1);
        JsonDiffDto diff = diffs.get(0);

        assertThat(diff.getField()).isEqualTo("name");
        assertThat(diff.getOldValue().asText()).isEqualTo("Alice");
        assertThat(diff.getNewValue().asText()).isEqualTo("Bob");
    }

    @Test
    void testProcessJsonDiff_withMultipleChanges() {
        // GIVEN
        String origin = "{ \"name\": \"Alice\", \"age\": 25, \"city\":\"Paris\" }";
        String actual = "{ \"name\": \"Alice\", \"age\": 30, \"city\":\"Lyon\" }"; 

        // WHEN
        List<JsonDiffDto> diffs = JsonUtils.processJsonDiff(origin, actual);

        // THEN
        assertThat(diffs).hasSize(2);

        JsonDiffDto ageDiff = diffs.stream().filter(d -> d.getField().equals("age")).findFirst().orElseThrow();
        assertThat(ageDiff.getOldValue().asInt()).isEqualTo(25);
        assertThat(ageDiff.getNewValue().asInt()).isEqualTo(30);

        JsonDiffDto cityDiff = diffs.stream().filter(d -> d.getField().equals("city")).findFirst().orElseThrow();
        assertThat(cityDiff.getOldValue().asText()).isEqualTo("Paris");
        assertThat(cityDiff.getNewValue().asText()).isEqualTo("Lyon");
    }

    @Test
    void testProcessJsonDiff_withNoChanges() {
        // GIVEN
        String origin = "{ \"name\": \"Alice\" }";
        String actual = "{ \"name\": \"Alice\" }";

        // WHEN
        List<JsonDiffDto> diffs = JsonUtils.processJsonDiff(origin, actual);

        // THEN
        assertThat(diffs).isEmpty();
    }

    @Test
    void testProcessJsonDiff_withInvalidJson_shouldThrow() {
        // GIVEN
        String origin = "{ \"name\": \"Alice\" }";
        String actual = "{ invalid-json }";

        // WHEN + THEN
        assertThrows(RuntimeException.class, () -> JsonUtils.processJsonDiff(origin, actual));
    }
}
